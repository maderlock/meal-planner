/**
 * Meal Planner Database Schema
 * 
 * This schema defines the core data structures for the Meal Planner application.
 * It includes models for user management, meal planning, and recipe organization.
 * 
 * Key Models:
 * - User: Manages user accounts and authentication
 * - Meal: Represents individual meals/recipes
 * - WeeklyPlan: Organizes meal assignments for the week
 * - MealAssignment: Links meals to specific days in weekly plans
 * - Favorite: Tracks user's favorite meals
 * 
 * Used By:
 * - Admin API routes for data management
 * - Mobile app through API integration
 * - Authentication system for user management
 * 
 * Database: PostgreSQL (Production), SQLite (Development)
 */

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model representing application users
model User {
  id              String    @id @default(uuid()) @db.Uuid
  firebaseUid     String?   @unique @map("firebase_uid")
  email           String    @unique
  username        String?   @unique
  password        String    @default("")
  displayName     String?   @map("display_name")
  photoUrl        String?   @map("photo_url")
  emailVerified   Boolean   @default(false) @map("email_verified")
  resetToken      String?   @map("reset_token")
  resetTokenExpiry DateTime? @map("reset_token_expiry")
  createdAt       DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt       DateTime  @updatedAt @map("updated_at") @db.Timestamptz
  weeklyPlans     WeeklyPlan[]
  meals           Meal[]

  @@map("users")
}

// Meal model representing individual meals/recipes
model Meal {
  id          String    @id @default(uuid()) @db.Uuid
  name        String
  description String?
  userId      String    @map("user_id") @db.Uuid
  imageUrl    String    @default("") @map("imageurl")
  isFavorite  Boolean   @default(false) @map("is_favorite")
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime  @updatedAt @map("updated_at") @db.Timestamptz
  user        User      @relation(fields: [userId], references: [id])
  mealPlans   MealPlan[]
  ingredients String[]  @default([]) @map("ingredients")
  instructions String[] @default([]) @map("instructions")
  cookingTime String?   @map("cooking_time")
  sourceUrl   String?   @map("source_url")

  @@map("meals")
}

// WeeklyPlan model for organizing meals
model WeeklyPlan {
  id              String    @id @default(uuid()) @db.Uuid
  userId          String    @map("user_id") @db.Uuid
  weekStartDate   DateTime  @map("week_start_date") @db.Timestamptz
  createdAt       DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt       DateTime  @updatedAt @map("updated_at") @db.Timestamptz
  user            User      @relation(fields: [userId], references: [id])
  mealPlans       MealPlan[]

  @@unique([userId, weekStartDate])
  @@index([userId])
  @@map("weekly_plans")
}

// MealPlan model for assigning meals to days in a weekly plan
model MealPlan {
  id           String     @id @default(uuid()) @db.Uuid
  weeklyPlanId String     @map("weekly_plan_id") @db.Uuid
  mealId       String     @map("meal_id") @db.Uuid
  dayOfWeek    Int        @map("day_of_week") // 0-6 for Sunday-Saturday
  mealType     String     @map("meal_type") // breakfast, lunch, dinner, snack
  createdAt    DateTime   @default(now()) @map("created_at") @db.Timestamptz
  updatedAt    DateTime   @updatedAt @map("updated_at") @db.Timestamptz
  weeklyPlan   WeeklyPlan @relation(fields: [weeklyPlanId], references: [id])
  meal         Meal       @relation(fields: [mealId], references: [id])

  @@unique([weeklyPlanId, dayOfWeek])
  @@index([weeklyPlanId])
  @@index([mealId])
  @@map("meal_plans")
}
